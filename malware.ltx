\documentclass[style=fyma,palette=blue,mode=present]{powerdot}
%% Uses the Powerdot package
%% - https://www.sharelatex.com/learn/Powerdot
%% - ftp://bay.uchicago.edu/tex-archive/macros/latex/contrib/powerdot/doc/powerdot.pdf
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{epsfig}
\usepackage{anyfontsize}
\usepackage{url}
\usepackage{breakurl}
\usepackage{graphicx}
\usepackage{verbatim}
\pdsetup{
 palette=blue,
 lf=Malware Analysis on a Budget,
 rf=Security BSides Cincy 2016
}
\title{Malware Analysis on a Budget}
\author{Coleman Kane\\Coleman.Kane@ge.com\\kaneca@mail.uc.edu\\@colemankane\\\url{https://github.com/ckane}}
\date{May 21 2016}
\begin{document}
\maketitle

\begin{slide}[toc=]{/me}
\begin{itemize}
\item Security Operations, Cyber Intelligenge for GE Aviation
\item Ph. D. candidate, Computer Science Engineering\\Cyber Operations track, University of Cincinnati
\item B.S. Computer Engineering, University of Cincinnati
\item CRITs project contributor
\item FreeBSD community member \& contributor since 2001
\item 6 years experience in IT Security, at least 10 years in CS and IT
\item Cincinnati native
\item Running (because I like cake)
\item 6 year old daughter
\item Fancies cats
\end{itemize}
\end{slide}

\begin{slide}[toc=]{What is malware?}
A very good place to begin is to define what is considered to be "malware". In my experience, in
attacks, there are two classes of malware:
\begin{enumerate}
 \item Artifacts designed to be used for malicious purposes (attack tools, exploits, etc.)
 \item Artifacts designed for legitimate use, that are also used for malicious attacks
\end{enumerate}

The second case will involve tools that may or may not be classifiable in every context
as "malware" within your environment.

\end{slide}
\begin{slide}[toc=]{Why Do Malware Analysis?}
A very valid question to ask yourselves:\\
\begin{itemize}
 \item\textit{What are you trying to get out of malware analysis?}
\end{itemize}

\vspace{0.1in}
When building a security program, a core goal of malware analysis should be to document unique
characteristics of malicious artifacts, in order to detect (and even prevent) them when
they are introduced in your environment.

\vspace{0.1in}
Embrace open-source security tools and the public community that supports and nurtures them.

\vspace{0.1in}
Build a chart, mapping analysis outputs to program inputs.

\vspace{0.1in}
As your security program matures, similarly mature your analysis program.

\end{slide}

\begin{slide}[toc=]{Two Faces of Malware Analysis}
There are primarily two sides to malware analysis. Gathering data on both of them is
important:
\begin{itemize}
 \item\textbf{Dynamic}: When the malware is executing, what effect does it have on the host system and
                        your networked environment?
 \item\textbf{Static}: When the malware is not executing, what characteristics distiguish its data from
                       the rest of the artifacts in your environment (including other malware).
\end{itemize}

We will briefly go over a number of analysis tools that our team and colleagues have found to be helpful.
Most of them fall into one of the two above categories, however some of them can assist with both.

\end{slide}

\begin{slide}[toc=]{Analysis Hardware}
I have found it helpful to use a separate system for analysis, frequently a Linux server that I can log
into. When a Windows environment is needed, I can utilize Virtual Machines via RDP on this server. I
recently went out and purchased the following hardware, for approximately \textbf{\$400}.

\begin{itemize}
 \item Asus M5A97 Motherboard (o/b NIC, HDMI): \$60
 \item Case w/ Power: \$30
 \item AMD FX 8320E CPU (8 core, 3.2GHz): \$90
 \item 3TB SATA HD 7200rpm: \$80
 \item 32GB RAM (4x8GB): \$140
\end{itemize}

I put Ubuntu 16.04 onto it, in my case, and it installed pretty easily.
\end{slide}

\begin{slide}[toc=]{Dynamic: Cuckoo Sandbox and Virtualbox VM}
Dynamic analysis requires a safe and isolated environment to execute malicious software, such that
it doesn't expose you to undesired risk.
\begin{itemize}
 \item Oracle Virtualbox (\url{http://virtualbox.org}) is a free and (mostly) open-source platform
       to provide virtual machine environments
 \item Cuckoo Sandbox (\url{http://cuckoosandbox.org}) is also free, and provides monitoring and
       data management for VM's with a focus on our use case of malware analysis
 \item VMCloak (\url{http://vmcloak.org}) is also free, and provides a helpful framework for automating
       the maintenance work involved in creating sandbox VM images
\end{itemize}

Oracle Virtualbox offers RDP and VNC options for its VM's so that you may interact with a system
while it is executing malware. You can also install Virtualbox on your desktop/laptop, and use the
same VMs there.
\end{slide}

\begin{slide}[toc=]{Dynamic: Sandboxes}
In many cases, I have found that it is more valuable to build a few "least secure" images of varying
configurations, than attempting to recreate your environment's "default build".

\vspace{0.1in}
\textbf{Why?}: Because chances are better than not that configuration variance across your environment
is high. Your systems are secured when they leave IT. Then you let your users have them.

\vspace{0.1in}
You want to collect and document \textbf{what would happen if the attack is successful}, rather than
use the tools to "validate your newly-issued hardware is secure". The latter is a valuable data point
to know, but save that for when you have ample funding for it as a project of its own.
\end{slide}

\begin{slide}[toc=]{Dynamic: Debuggers}
For the analyst with machine-code/disassembly expertise, additional debugging tools have been
developed which can help in the analysis of malware.
\begin{itemize}
 \item Immunity Debugger (\url{http://debugger.immunityinc.com})
\end{itemize}
\end{slide}

\begin{slide}[toc=]{Static Analysis Overview}
{\small There are a large amount of static analyzers out there. The below families describe some types of
static analyzers that should be helpful in quickly getting your system off the ground:
\begin{itemize}
 \item\textbf{Meta-analyzers}: Analysis engines that are comprised of multiple analysis stages and
                               document deep inspection findings in a structured output
 \item\textbf{Disassemblers}: Tools developed to identify machine code and convert it into human
                              readable instruction mnemonics
 \item\textbf{Parsers}: Tools used to parse structured, typically binary, file formats into human
                        readable reports, and even extracted artifacts they contain
 \item\textbf{Decompilers}: Kind of hybrid between parser \& disassembler - can convert bytecode
                            into source code
 \item\textbf{Scanners}: Tools used to scan contents, activity logs, and other artifacts for signatures
                         of malicious activity
\end{itemize}}
\end{slide}

\begin{slide}[toc=]{Scanners}
Some ``scanners'' you may be familiar with include most ``signature based'' Anti-Virus systems, such as
Sophos, Symantec, McAfee. In many cases, these maintain a database of virus definitions that amount to
patterns that recognize unique content within malicious files. Typically, you cannot add new information
to this database yourself.

\vspace{0.1in}
Victor Alvarez's Yara Project: \url{http://plusvic.github.io/yara/}

\vspace{0.1in}
Probably the most widely used tool for building your own signature database. Lots of open-source
places to start:

\begin{itemize}
 \item\url{https://github.com/Yara-Rules/rules/}
 \item\url{https://github.com/Xen0ph0n/YaraGenerator}
 \item\url{https://malwareconfig.com/yara/}
\end{itemize}

\end{slide}

\begin{slide}[toc=,method=direct]{Scanners (yara example)}
{\tiny
\begin{verbatim}
rule Tinba2 {
 meta:
  author = "n3sfox <n3sfox\@gmail.com>"
  date = "2015/11/07"
  description = "Tinba 2 (DGA) banking trojan"
  reference = "https://securityintelligence.com/tinba-malware-
               reloaded-and-attacking-banks-around-the-world"
  filetype = "memory"
  hash1 = "c7f662594f07776ab047b322150f6ed0"
  hash2 = "dc71ef1e55f1ddb36b3c41b1b95ae586"
  hash3 = "b788155cb82a7600f2ed1965cffc1e88"

 strings:
  $str1 = "MapViewOfFile"
  $str2 = "OpenFileMapping"
  $str3 = "NtCreateUserProcess"
  $str4 = "NtQueryDirectoryFile"
  $str5 = "RtlCreateUserThread"
  $str6 = "DeleteUrlCacheEntry"
  $str7 = "PR_Read"
  $str8 = "PR_Write"
  $pubkey = "BEGIN PUBLIC KEY"
  $code1 = {50 87 44 24 04 6A ?? E8}

 condition:
  all of ($str*) and $pubkey and $code1
}
\end{verbatim}
}
\end{slide}

\begin{slide}[toc=,method=direct]{Scanners (yara regex example)}
{\tiny
\begin{verbatim}
rule jRat
{
 meta:
  author = " Kevin Breen <kevin@techanarchy.net>"
  date = "2014/04"
  ref = "http://malwareconfig.com/stats/jRat"
  maltype = "Remote Access Trojan"
  filetype = "Java"

 strings:
  $meta = "META-INF"
  $key = "key.dat"
  $conf = "config.dat"
  $jra1 = "enc.dat"
  $jra2 = "a.class"
  $jra3 = "b.class"
  $jra4 = "c.class"
  $reClass1 = /[a-z]\.class/
  $reClass2 = /[a-z][a-f]\.class/

 condition:
  ($meta and $key and $conf and #reClass1 > 10 and #reClass2 > 10)
  or ($meta and $key and all of ($jra*))
}
\end{verbatim}
}
\end{slide}

\begin{slide}[toc=]{Parsers}
Your users work with many structured file types in their daily work. Structures within
these files are leveraged by adversaries to target vulnerabilities in specific parts of
the applications used to open them.

\vspace{0.1in}
When analyzing these attacks, it is important to use a parser that doesn't happen to be
composed of the same software code targeted by the exploit. The community has built a number
of parsers for common file formats to meet this need, available for free.

\end{slide}

\begin{slide}[toc=]{Parsers (open source)}
Some parsers, and the file types they operate on:
{\small
\begin{itemize}
 \item\texttt{python-oletools / olevba}, \url{http://www.decalage.info/python/oletools}, works on 
      MSOffice "OLE" file formats which include old (pre-DOCX) files, as well as many components
      inside newer office documents. Can parse VB macros from documents.
 \item\texttt{pdf-parser, pdf-tools}, \url{https://blog.didierstevens.com/programs/pdf-tools/}, works
      on PDF documents
 \item\texttt{officeparser.py}, \url{https://github.com/unixfreak0037/officeparser}, similar to oletools
      above, which was based upon this utility
 \item\texttt{p7zip}, \url{http://p7zip.sourceforge.net/}, multi-archive parser. Remember how newer
      MSOffice and OpenOffice documents are just ZIP archives? Also extracts EXE sections.
 \item\texttt{exiftool}, \url{http://search.cpan.org/~exiftool/}, originally for extracting image header
      data, at some point was extended to basically parse every file header under the sun
\end{itemize}}
\end{slide}

\begin{slide}[toc=]{Decompilers}
Decompilers parse executable bytecode, and attempt to reverse-engineer it back into source code that
could be human readable and more expressive in helping identify the nature of malware.

\vspace{0.2in}
We have observed
many samples of malware written in C\# .NET, Java, and Flash (compiled ActionScript) and have found some
utilities that are useful in recovering source code to help analysis.

\vspace{0.2in}
In some ways, you can look at a decompiler as a special class of file parser.
\end{slide}

\begin{slide}[toc=]{Decompilers (cont.)}
\begin{itemize}
 \item\textbf{C\#}: dotPeek \& ILSpy
 \begin{itemize}
  \item\url{http://ilspy.net/}: ILSpy
  \item\url{https://www.jetbrains.com/decompiler/}: dotPeek
 \end{itemize}
 \item\textbf{Java}: Jad (command-line), JD (library / GUI)
 \begin{itemize}
  \item\url{http://jd.benow.ca}: JD (Java Decompiler project)
  \item\url{http://www.javadecompilers.com/jad}: Jad (now defunct, but still very popular)
 \end{itemize}
 \item\textbf{Flash ActionScript}: jpexs-decompiler
 \begin{itemize}
  \item\url{https://www.free-decompiler.com/flash/} - formerly ``asdec''
 \end{itemize}
\end{itemize}
\end{slide}

\begin{slide}[toc=]{Disassemblers}
Disassembly involves reading binary machine code or bytecode, and then providing (\textit{semi-})human
readable listing of the instruction sequences.

Some that I've used and are helpful:
\begin{itemize}
 \item\textbf{ndisasm}: \url{http://www.nasm.us}, Disassembler from the Netwide Assembler distribution. Primarly
                        works on raw data, x86 16, 32, and 64 bit.
 \item\textbf{ROSE Compiler}: \url{http://www.rosecompiler.org}, Disassembler that also can do block and
      path identification
 \item\textbf{IDA Free / Pro}: \url{https://www.hex-rays.com/products/ida/}, De-facto standard for malware
      analysis at the assembly level. Free version is quite functional and featureful.
\end{itemize}
\end{slide}

\begin{slide}[toc=]{Debuggers}
Frequently, you encounter malware that is obfuscated or packaged in a way that introduces hurdles to static
analysis. In these cases, it is desirable to have a view of the disassembly during program execution, and
to be able to control program execution.

Some popular popular debuggers are below, and some static analysis tools (like IDA) offer some
online debugger features as well:
\begin{itemize}
 \item\textbf{OllyDbg}: \url{http://www.ollydbg.de}, a really old and really popular debugger for windows
 \item\textbf{Immunity Debugger}: \url{http://debugger.immunityinc.com}, a newer debugger that's similar
      to OllyDbg with some newer features and more recent updates
 \item\textbf{GNU Debugger (GDB)}: \url{https://www.gnu.org/software/gdb/}, ubiquitous debugger for today's
      UNIX-like environments (including Mac!)
\end{itemize}
\end{slide}

\begin{slide}[toc=]{Tie things together: Meta-Analyzers}
Meta-analysis frameworks are commonly pluggable systems that join multiple analysis tools together into
an analysis suite, complete with consolidated reporting, and sometimes archival features.

\vspace{0.1in}
These are frequently targeting automated, bulk analysis use-cases, and are \textbf{my \#1 recommended
place to jump in to get involved in contributing}.

\vspace{0.1in}
In most cases, these provide an analysis pipeline as well as a plugin framework for analysts to bring
their own tools to the party with minimal effort.

\end{slide}

\begin{slide}[toc=]{Meta-Analyzers}
Two of my favorites:

\begin{itemize}
 \item\textbf{LaikaBOSS}: Analysis framework developed and
      released recently by Lockheed Martin. Lots of community activity and capability.
  \begin{itemize}
   \item\url{https://github.com/lmco/laikaboss}
   \item\url{http://lockheedmartin.com/us/what-we-do/information-technology/cybersecurity/laika-boss.html}
  \end{itemize}
 \item\textbf{MASTIFF}: Analysis framework and storage system developed by Tyler Hudak (\textit{@SecShoggoth})
                        of KoreLogic. Offers free online service.
  \begin{itemize}
   \item\url{https://mastiff-online.korelogic.com/}
   \item\url{https://git.korelogic.com/mastiff.git/}
  \end{itemize}
\end{itemize}
\end{slide}

\end{document}
